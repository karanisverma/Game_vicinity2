


# import cv2
# import time
# import matplotlib.pyplot as plt
# i=1

# while(i<=3):
#     # htemp=0
#     # wtemp=0
#     image=str(i)+'.bmp'
#     cctv_image = cv2.imread(str(i)+'.bmp')
#     print(image)
#     # the 'cascade.xml' file is the file generated by the training script above
#     #vehicle_classifier = cv2.CascadeClassifier('newoutput.xml')
#     vehicle_classifier2 = cv2.CascadeClassifier('hope.xml')

#     # various parameters can be passed to modify how objects are detected
#    # vehicles = vehicle_classifier.detectMultiScale(cctv_image, 6.5,3, maxSize=(1000,800))
#     vehicles2 = vehicle_classifier2.detectMultiScale(cctv_image, 1.1,5,minSize=(100,100))

#     #print 'Vehicles detected: %d' % (len(vehicles))
#     print 'Vehicles detected: %d' % (len(vehicles2))

#     # draw a rectangle around every vehicle detected
#     # for (x,y,w,h) in vehicles:
#     #     cv2.rectangle(cctv_image, (x,y), (x+w, y+h),(255,0,0),3)
#     for (x,y,w,h) in vehicles2:
#         #if(htemp!=1):
#             cv2.rectangle(cctv_image, (x,y), (x+w, y+h),(0,0,255),3)
#             # htemp=1
#             # wtemp=w


#     plt.figure(figsize=(10,10))
#     plt.axis('off')
#     plt.imshow(cv2.cvtColor(cctv_image, cv2.COLOR_BGR2RGB))
#     plt.imshow(cctv_image,cmap = 'gray')
#     plt.show()
#     #time.dealy(100)
#     i=i+1;

import cv2
import sys

carCascade1 = cv2.CascadeClassifier('tree.xml')
carCascade2 = cv2.CascadeClassifier('cas2.xml')
carCascade3 = cv2.CascadeClassifier('cas3.xml')
carCascade4 = cv2.CascadeClassifier('hope.xml')

video_capture = cv2.VideoCapture('yt.mp4')

print(video_capture.isOpened())
while(video_capture.isOpened()):
    # Capture frame-by-frame
    ret, frame = video_capture.read()

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    cars1 = carCascade1.detectMultiScale(
        gray,
        scaleFactor=2.2,
        minNeighbors=2,
        minSize=(14, 14),
        flags=cv2.cv.CV_HAAR_SCALE_IMAGE
    )
    # cars2 = carCascade2.detectMultiScale(
    #     gray,
    #     scaleFactor=1.2,
    #     minNeighbors=4,
    #     minSize=(10, 10),
    #     flags=cv2.cv.CV_HAAR_SCALE_IMAGE
    # )
    # cars3 = carCascade3.detectMultiScale(
    #     gray,
    #     scaleFactor=1.2,
    #     minNeighbors=3,
    #     minSize=(10, 10),
    #     flags=cv2.cv.CV_HAAR_SCALE_IMAGE
    # )
    # cars4 = carCascade4.detectMultiScale(
    #     gray,
    #     scaleFactor=1.1,
    #     minNeighbors=3,
    #     minSize=(10, 10),
    #     flags=cv2.cv.CV_HAAR_SCALE_IMAGE
    # )
   

    # Draw a rectangle around the faces
    for (x, y, w, h) in cars1:
        cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)
    # for (x, y, w, h) in cars2:
    #     cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)
    # for (x, y, w, h) in cars3:
    #     cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 0, 255), 2)
    # for (x, y, w, h) in cars4:
    #     cv2.rectangle(frame, (x, y), (x+w, y+h), (0,0, 0), 2)


    # Display the resulting frame
    cv2.imshow('Video', frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# When everything is done, release the capture
video_capture.release()
cv2.destroyAllWindows()

# import numpy as np
# import cv2

# cap = cv2.VideoCapture('estvid.flv')
# print(cap.isOpened())
# while(cap.isOpened()):
#     ret, frame = cap.read()

#     gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

#     cv2.imshow('frame',gray)
#     if cv2.waitKey(1) & 0xFF == ord('q'):
#         break

# cap.release()
# cv2.destroyAllWindows()